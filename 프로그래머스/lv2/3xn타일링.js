/* 규칙을 찾기 어려운 DP문제 사고과정

/** 일단 n=1일 때부터 시작해서 뭐가 나오는지 나열해보자.
/** n=5까지 나열해봤을 때 n이 홀수인 경우의 해는 존재하지 않고 n=4일때 n=2로 조합해서 나올 수 없는 새로운 직사각형 2개가 만들어진다는 것을 알 수 있다.
/** 새로운 직사각형은 세로선이 어긋난 직사각형이다.
/** (가정) n이 2씩 증가할 때마다 새로운 직사각형은 항상 2개씩 만들어진다.
/** n=6일때도 새로운 직사각형이 2개씩 만들어지는가? -> Yes
/** 그렇다면 n=4일때 d[n] = d[n - 2] * 3 + 2 이라는 점화식을 세울 수 있다. 이 점화식이 n=6일때도 만족하는지 확인해본다.
/** d[6]은 (d[4]에서 나온 모양 * d[2]에서 나온 모양 + d[2]에서 나온 모양 + d[4]에서 나온 모양 + 새로운 직사각형 2개)로 구할 수 있는지 확인해보자.
/** 위 식대로라면 첫 번째 항에서 나오는 모양과 두 번째 항에서 나오는 모양(2끼리 조합해서 나온 모양)이 겹치게 된다. 
/** (d[4]에서 나온 모양 * d[2]에서 나온 모양 + d[2]에서 나온 모양 + d[4]에서 새로 나온 모양 2개 + 새로운 직사각형 2개) 여야 겹치지 않고 구할 수 있다.
/** n=8일때,
/** (d[6]에서 나온 모양 * d[2]에서 나온 모양 + d[4]에서 나온 모양 + d[4]에서 새로 나온 모양 2개 + d[2]에서 나온 모양 + d[6]에서 새로 나온 모양 2개+ 새로운 직사각형 2개)
/** 로 구할 수 있다. 지금까지 나온 식을 이용해서 n=i일때 일반화하면 최종 점화식을 구할 수 있다.
/** d[i] = d[i - 2] * 3 + d[i - 4] * 2 + ... + d[i - j] * 2 + 2 (단, 4 <= j <= i)

*/
function solution(n) {
    const DIV = 1e9 + 7;
    const dp = Array(n + 1).fill(0);
    dp[2] = 3;
    
    for(let i = 4; i <= n; i += 2) {
        let sequence = 0;
        for(let j = 4; j <= i; j += 2) {
            sequence += dp[i - j];
        }
        dp[i] = (dp[i - 2] * 3 + sequence * 2 + 2) % DIV;
    }
    return dp[n];
}
